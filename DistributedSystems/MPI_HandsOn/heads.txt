==> ./LAB_7/lab7.c <==
/*Aim: Write a program for matrix multiplication using same size.*/



==> ./LAB_7/rpcdemo/localdemo.c <==
#include <stdio.h>
#include <stdlib.h>


==> ./LAB_7/rpcdemo/date_clnt.c <==
/*
 * Please do not edit this file.
 * It was generated using rpcgen.

==> ./LAB_7/rpcdemo/date_svc.c <==
/*
 * Please do not edit this file.
 * It was generated using rpcgen.

==> ./LAB_7/rpcdemo/date_client.c <==
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them

==> ./LAB_7/rpcdemo/date_server.c <==
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them

==> ./LAB_9/lab9.c <==
Aim: Write a program for matrix determinant.

#include <mpi.h>

==> ./LAB_10/lab10.c <==
Aim: Write a MPI program which take data from file and sort using merge sort. 



==> ./LAB_8/lab8.c <==
Aim: Write a program for matrix multiplication using different size.



==> ./LAB_6/lab6.c <==
Aim: Write a program for sum 1 to 1000 using group communication.



==> ./LAB_1/lab_1.2/lab1_1.c <==
//Aim: Write MPI program to demonstrate the use of Mpi_send and Mpi_recv function and print the processes recieves data using blocking message passing routine.



==> ./LAB_1/lab_1.1/lab1.c <==
//Aim: Write MPI program to show how many tasks are running and what is the rank of it.

//Program:

==> ./LAB_4/test.c <==
//Aim:write a program for parellel summation of 1 to 20000



==> ./LAB_4/Rank0AsCollectorOnly.c <==
//Aim:write a program for parellel summation of 1 to 20000



==> ./LAB_3/lab_3.c <==
//Aim:Write a program for distribute the matrix data among different processes using contiguous derived data type.



==> ./LAB_2/lab_2.2/lab_2_2.c <==
//Aim:write a program for create configuration derived data type in which row of matrix is assigned to different processes.



==> ./LAB_2/lab_2.1/lab_2_1.c <==
//Aim: write a program for collexctive communication using mpi_scatter



==> ./LAB_5/LAB_5.5/LAB5_5.c <==
//Write MPI program to divide tasks into three groups based upon rank. Create new communication and then perform Collective Communication. Also show group communication.
#include "mpi.h"
#include <stdio.h>

==> ./LAB_5/LAB_5.2/lab5_2.c <==
//Write MPI program to create structure that represent a partical and distribute array of particles into different processes.

#include "mpi.h"

==> ./LAB_5/LAB_5.3/lab5_3.c <==
//Write MPI program to create vector derived data type in which each column of matrix is represented by different processes.

#include "mpi.h"

==> ./LAB_5/LAB_5.4/lab5_4.c <==
//Write MPI program to divide tasks into two groups based upon rank. Create new communication and then perform Collective Communication. Also show group communication.

#include "mpi.h"

==> ./LAB_5/LAB_5.1/lab5_1.c <==
//Write MPI program to demonstrate how to creat Indexed data type to extract variable portion of array and assign this portion to different processes.

#include "mpi.h"

==> ./LAB_7 <==
