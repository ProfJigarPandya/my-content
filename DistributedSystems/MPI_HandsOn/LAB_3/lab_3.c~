Aim:
Program 3_second_derived_datatype_change_size

#include "mpi.h"
#include <stdio.h>
#define SIZE 4
#define SIZEC 5
main(int argc, char *argv[]) 
{
	int numtasks, rank, source=0, dest, tag=1, i;
	float a[SIZE][SIZEC] =
						{1.0, 2.0, 3.0, 4.0,5.0,
						 6.0, 7.0, 8.0,9.0, 10.0,
						  11.0, 12.0,13.0, 14.0, 15.0,
						   16.0,17.0,18.0,19.0,20.0};
	float b[SIZEC];
	
	MPI_Status stat;
	MPI_Datatype rowtype;

	MPI_Init(&argc,&argv);
	
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &numtasks);
	MPI_Type_contiguous(SIZEC, MPI_FLOAT, &rowtype);//MPI_Type_contiguous (count,oldtype,&newtype)//how many value going to change//float*sizec=rowtype send
	MPI_Type_commit(&rowtype);//all process know new datatype
	if (numtasks == SIZE)//give numtasks=4 in terminal
	 {
		if (rank == 0)
		 {
			for (i=0; i<numtasks; i++)
				MPI_Send(&a[i][0], 1, rowtype, i, tag, MPI_COMM_WORLD);//here rowtype is 5 as set in mpi_type_contiguous function//starting from &a[i][0] to rowtype length data send
		}
		MPI_Recv(b, SIZEC, MPI_FLOAT, source, tag, MPI_COMM_WORLD, &stat);//SIZEC at a time how many number receive
		printf("rank= %d b= %3.1f %3.1f %3.1f %3.1f %3.1f\n",rank,b[0],b[1],b[2],b[3],b[4]);//print all the number received by b array
	}
	else
	
		printf("Must specify %d processors. Terminating.\n",SIZEC);
		MPI_Type_free(&rowtype);
		MPI_Finalize();
}
