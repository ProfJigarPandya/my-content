#include "mpi.h"
#include <stdio.h>
#define SIZE 4
#define NPROC 8
main(int argc, char *argv[])
{
	int numtasks, rank, source=0, dest, tag=1, i,k,j,c[SIZE][SIZE],sum=0,result[SIZE][SIZE],receiveNum[SIZE];
	int A[SIZE][SIZE] ={2, 3, 4, 5,
			  2, 3, 4, 5,
			  2, 3, 4, 5,
			  2, 3, 4, 5};
	int B[SIZE][SIZE]={2, 3, 4, 5,
			 2, 3, 4, 5,
			 2, 3, 4, 5,
			 2, 3, 4, 5};


	MPI_Status stat;
	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &numtasks);

	

if (numtasks == SIZE)//give numtasks=4 in terminal
{
			
			for(j=0;j<SIZE;j++)
			{
					
				sum=0;
				for(k=0;k<SIZE;k++)
				{
							
					sum=sum+A[rank][k]*B[k][j];
				}
				
			c[rank][j]=sum;
			
			}			

			
			MPI_Send(&c[rank],4, MPI_INT,0, tag, MPI_COMM_WORLD);			
		
			if(rank==0)
			{
				for (i=0; i<SIZE; i++)
				{
					
					MPI_Recv(&result[i], SIZE, MPI_INT, i, tag, MPI_COMM_WORLD, &stat);
					
				}
				
				printf("Matrix A :\n");
				
				for(i=0;i<SIZE;i++)
				{
				      printf("%d \t %d \t %d \t %d\n",A[i][0],A[i][1],A[i][2],A[i][3]);
				}
				
				printf("Matrix B :\n");
				
				for(j=0;j<SIZE;j++)
				{
				      printf("%d \t %d \t %d \t %d\n",B[j][0],B[j][1],B[j][2],B[j][3]);
				}
				
				
				printf("result\n");
				
				for(i=0;i<SIZE;i++)
					printf("%d\t%d\t%d\t%d\n",result[i][0],result[i][1],result[i][2],result[i][3]);
	
	
			}
}
MPI_Finalize();
}

