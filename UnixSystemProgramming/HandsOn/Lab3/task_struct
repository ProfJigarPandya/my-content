1166 struct task_struct {
1167         volatile long state;    /* -1 unrunnable, 0 runnable, >0 stopped */
1168         void *stack;
1169         atomic_t usage;
1170         unsigned int flags;     /* per process flags, defined below */
1171         unsigned int ptrace;
1172 
1173         int lock_depth;         /* BKL lock depth */
1174 
1175 #ifdef CONFIG_SMP
1176 #ifdef __ARCH_WANT_UNLOCKED_CTXSW
1177         int oncpu;
1178 #endif
1179 #endif
1180 
1181         int prio, static_prio, normal_prio;
1182         unsigned int rt_priority;
1183         const struct sched_class *sched_class;
1184         struct sched_entity se;
1185         struct sched_rt_entity rt;
1186 
1187 #ifdef CONFIG_PREEMPT_NOTIFIERS
1188         /* list of struct preempt_notifier: */
1189         struct hlist_head preempt_notifiers;
1190 #endif
1191 
1192         /*
1193          * fpu_counter contains the number of consecutive context switches
1194          * that the FPU is used. If this is over a threshold, the lazy fpu
1195          * saving becomes unlazy to save the trap. This is an unsigned char
1196          * so that after 256 times the counter wraps and the behavior turns
1197          * lazy again; this to deal with bursty apps that only use FPU for
1198          * a short time
1199          */
1200         unsigned char fpu_counter;
1201         s8 oomkilladj; /* OOM kill score adjustment (bit shift). */
1202 #ifdef CONFIG_BLK_DEV_IO_TRACE
1203         unsigned int btrace_seq;
1204 #endif
1205 
1206         unsigned int policy;
1207         cpumask_t cpus_allowed;
1208 
1209 #ifdef CONFIG_PREEMPT_RCU
1210         int rcu_read_lock_nesting;
1211         int rcu_flipctr_idx;
1212 #endif /* #ifdef CONFIG_PREEMPT_RCU */
1213 
1214 #if defined(CONFIG_SCHEDSTATS) || defined(CONFIG_TASK_DELAY_ACCT)
1215         struct sched_info sched_info;
1216 #endif
1217 
1218         struct list_head tasks;
1219         struct plist_node pushable_tasks;
1220 
1221         struct mm_struct *mm, *active_mm;
1222 
1223 /* task state */
1224         struct linux_binfmt *binfmt;
1225         int exit_state;
1226         int exit_code, exit_signal;
1227         int pdeath_signal;  /*  The signal sent when the parent dies  */
1228         /* ??? */
1229         unsigned int personality;
1230         unsigned did_exec:1;
1231         unsigned in_execve:1;   /* Tell the LSMs that the process is doing an
1232                                  * execve */
1233         pid_t pid;
1234         pid_t tgid;
1235 
1236         /* Canary value for the -fstack-protector gcc feature */
1237         unsigned long stack_canary;
1238 
1239         /* 
1240          * pointers to (original) parent process, youngest child, younger sibling,
1241          * older sibling, respectively.  (p->father can be replaced with 
1242          * p->real_parent->pid)
1243          */
1244         struct task_struct *real_parent; /* real parent process */
1245         struct task_struct *parent; /* recipient of SIGCHLD, wait4() reports */
1246         /*
1247          * children/sibling forms the list of my natural children
1248          */
1249         struct list_head children;      /* list of my children */
1250         struct list_head sibling;       /* linkage in my parent's children list */
1251         struct task_struct *group_leader;       /* threadgroup leader */
1252 
1253         /*
1254          * ptraced is the list of tasks this task is using ptrace on.
1255          * This includes both natural children and PTRACE_ATTACH targets.
1256          * p->ptrace_entry is p's link on the p->parent->ptraced list.
1257          */
1258         struct list_head ptraced;
1259         struct list_head ptrace_entry;
1260 
1261         /*
1262          * This is the tracer handle for the ptrace BTS extension.
1263          * This field actually belongs to the ptracer task.
1264          */
1265         struct bts_context *bts;
1266 
1267         /* PID/PID hash table linkage. */
1268         struct pid_link pids[PIDTYPE_MAX];
1269         struct list_head thread_group;
1270 
1271         struct completion *vfork_done;          /* for vfork() */
1272         int __user *set_child_tid;              /* CLONE_CHILD_SETTID */
1273         int __user *clear_child_tid;            /* CLONE_CHILD_CLEARTID */
1274 
1275         cputime_t utime, stime, utimescaled, stimescaled;
1276         cputime_t gtime;
1277         cputime_t prev_utime, prev_stime;
1278         unsigned long nvcsw, nivcsw; /* context switch counts */
1279         struct timespec start_time;             /* monotonic time */
1280         struct timespec real_start_time;        /* boot based time */
1281 /* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */
1282         unsigned long min_flt, maj_flt;
1283 
1284         struct task_cputime cputime_expires;
1285         struct list_head cpu_timers[3];
1286 
1287 /* process credentials */
1288         const struct cred *real_cred;   /* objective and real subjective task
1289                                          * credentials (COW) */
1290         const struct cred *cred;        /* effective (overridable) subjective task
1291                                          * credentials (COW) */
1292         struct mutex cred_guard_mutex;  /* guard against foreign influences on
1293                                          * credential calculations
1294                                          * (notably. ptrace) */
1295 
1296         char comm[TASK_COMM_LEN]; /* executable name excluding path
1297                                      - access with [gs]et_task_comm (which lock
1298                                        it with task_lock())
1299                                      - initialized normally by setup_new_exec */
1300 /* file system info */
1301         int link_count, total_link_count;
1302 #ifdef CONFIG_SYSVIPC
1303 /* ipc stuff */
1304         struct sysv_sem sysvsem;
1305 #endif
1306 #ifdef CONFIG_DETECT_HUNG_TASK
1307 /* hung task detection */
1308         unsigned long last_switch_count;
1309 #endif
1310 /* CPU-specific state of this task */
1311         struct thread_struct thread;
1312 /* filesystem information */
1313         struct fs_struct *fs;
1314 /* open file information */
1315         struct files_struct *files;
1316 /* namespaces */
1317         struct nsproxy *nsproxy;
1318 /* signal handlers */
1319         struct signal_struct *signal;
1320         struct sighand_struct *sighand;
1321 
1322         sigset_t blocked, real_blocked;
1323         sigset_t saved_sigmask; /* restored if set_restore_sigmask() was used */
1324         struct sigpending pending;
1325 
1326         unsigned long sas_ss_sp;
1327         size_t sas_ss_size;
1328         int (*notifier)(void *priv);
1329         void *notifier_data;
1330         sigset_t *notifier_mask;
1331         struct audit_context *audit_context;
1332 #ifdef CONFIG_AUDITSYSCALL
1333         uid_t loginuid;
1334         unsigned int sessionid;
1335 #endif
1336         seccomp_t seccomp;
1337 
1338 /* Thread group tracking */
1339         u32 parent_exec_id;
1340         u32 self_exec_id;
1341 /* Protection of (de-)allocation: mm, files, fs, tty, keyrings, mems_allowed,
1342  * mempolicy */
1343         spinlock_t alloc_lock;
1344 
1345 #ifdef CONFIG_GENERIC_HARDIRQS
1346         /* IRQ handler threads */
1347         struct irqaction *irqaction;
1348 #endif
1349 
1350         /* Protection of the PI data structures: */
1351         spinlock_t pi_lock;
1352 
1353 #ifdef CONFIG_RT_MUTEXES
1354         /* PI waiters blocked on a rt_mutex held by this task */
1355         struct plist_head pi_waiters;
1356         /* Deadlock detection and priority inheritance handling */
1357         struct rt_mutex_waiter *pi_blocked_on;
1358 #endif
1359 
1360 #ifdef CONFIG_DEBUG_MUTEXES
1361         /* mutex deadlock detection */
1362         struct mutex_waiter *blocked_on;
1363 #endif
1364 #ifdef CONFIG_TRACE_IRQFLAGS
1365         unsigned int irq_events;
1366         int hardirqs_enabled;
1367         unsigned long hardirq_enable_ip;
1368         unsigned int hardirq_enable_event;
1369         unsigned long hardirq_disable_ip;
1370         unsigned int hardirq_disable_event;
1371         int softirqs_enabled;
1372         unsigned long softirq_disable_ip;
1373         unsigned int softirq_disable_event;
1374         unsigned long softirq_enable_ip;
1375         unsigned int softirq_enable_event;
1376         int hardirq_context;
1377         int softirq_context;
1378 #endif
1379 #ifdef CONFIG_LOCKDEP
1380 # define MAX_LOCK_DEPTH 48UL
1381         u64 curr_chain_key;
1382         int lockdep_depth;
1383         unsigned int lockdep_recursion;
1384         struct held_lock held_locks[MAX_LOCK_DEPTH];
1385         gfp_t lockdep_reclaim_gfp;
1386 #endif
1387 
1388 /* journalling filesystem info */
1389         void *journal_info;
1390 
1391 /* stacked block device info */
1392         struct bio *bio_list, **bio_tail;
1393 
1394 /* VM state */
1395         struct reclaim_state *reclaim_state;
1396 
1397         struct backing_dev_info *backing_dev_info;
1398 
1399         struct io_context *io_context;
1400 
1401         unsigned long ptrace_message;
1402         siginfo_t *last_siginfo; /* For ptrace use.  */
1403         struct task_io_accounting ioac;
1404 #if defined(CONFIG_TASK_XACCT)
1405         u64 acct_rss_mem1;      /* accumulated rss usage */
1406         u64 acct_vm_mem1;       /* accumulated virtual memory usage */
1407         cputime_t acct_timexpd; /* stime + utime since last update */
1408 #endif
1409 #ifdef CONFIG_CPUSETS
1410         nodemask_t mems_allowed;        /* Protected by alloc_lock */
1411         int cpuset_mem_spread_rotor;
1412 #endif
1413 #ifdef CONFIG_CGROUPS
1414         /* Control Group info protected by css_set_lock */
1415         struct css_set *cgroups;
1416         /* cg_list protected by css_set_lock and tsk->alloc_lock */
1417         struct list_head cg_list;
1418 #endif
1419 #ifdef CONFIG_FUTEX
1420         struct robust_list_head __user *robust_list;
1421 #ifdef CONFIG_COMPAT
1422         struct compat_robust_list_head __user *compat_robust_list;
1423 #endif
1424         struct list_head pi_state_list;
1425         struct futex_pi_state *pi_state_cache;
1426 #endif
1427 #ifdef CONFIG_PERF_COUNTERS
1428         struct perf_counter_context *perf_counter_ctxp;
1429         struct mutex perf_counter_mutex;
1430         struct list_head perf_counter_list;
1431 #endif
1432 #ifdef CONFIG_NUMA
1433         struct mempolicy *mempolicy;    /* Protected by alloc_lock */
1434         short il_next;
1435 #endif
1436         atomic_t fs_excl;       /* holding fs exclusive resources */
1437         struct rcu_head rcu;
1438 
1439         /*
1440          * cache last used pipe for splice
1441          */
1442         struct pipe_inode_info *splice_pipe;
1443 #ifdef  CONFIG_TASK_DELAY_ACCT
1444         struct task_delay_info *delays;
1445 #endif
1446 #ifdef CONFIG_FAULT_INJECTION
1447         int make_it_fail;
1448 #endif
1449         struct prop_local_single dirties;
1450 #ifdef CONFIG_LATENCYTOP
1451         int latency_record_count;
1452         struct latency_record latency_record[LT_SAVECOUNT];
1453 #endif
1454         /*
1455          * time slack values; these are used to round up poll() and
1456          * select() etc timeout values. These are in nanoseconds.
1457          */
1458         unsigned long timer_slack_ns;
1459         unsigned long default_timer_slack_ns;
1460 
1461         struct list_head        *scm_work_list;
1462 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
1463         /* Index of current stored adress in ret_stack */
1464         int curr_ret_stack;
1465         /* Stack of return addresses for return function tracing */
1466         struct ftrace_ret_stack *ret_stack;
1467         /* time stamp for last schedule */
1468         unsigned long long ftrace_timestamp;
1469         /*
1470          * Number of functions that haven't been traced
1471          * because of depth overrun.
1472          */
1473         atomic_t trace_overrun;
1474         /* Pause for the tracing */
1475         atomic_t tracing_graph_pause;
1476 #endif
1477 #ifdef CONFIG_TRACING
1478         /* state flags for use by tracers */
1479         unsigned long trace;
1480         /* bitmask of trace recursion */
1481         unsigned long trace_recursion;
1482 #endif /* CONFIG_TRACING */
1483 };
